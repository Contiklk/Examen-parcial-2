import heapq
import json
import os
from datetime import datetime

TAREAS_FILE = "tareas.json"

class Tarea:
    def __init__(self, nombre, prioridad, fecha_vencimiento, dependencias=None):
        self.nombre = nombre
        self.prioridad = prioridad
        self.fecha_vencimiento = fecha_vencimiento
        self.dependencias = dependencias if dependencias else []

    def es_ejecutable(self, tareas_completadas):
        return all(dep in tareas_completadas for dep in self.dependencias)

    def to_dict(self):
        return {
            'nombre': self.nombre,
            'prioridad': self.prioridad,
            'fecha_vencimiento': self.fecha_vencimiento,
            'dependencias': self.dependencias
        }

    @staticmethod
    def from_dict(data):
        return Tarea(
            data['nombre'],
            data['prioridad'],
            data['fecha_vencimiento'],
            data.get('dependencias', [])
        )

class GestorTareas:
    def __init__(self):
        self.tareas = []
        self.completadas = set()
        self.cargar_tareas()

    def guardar_tareas(self):
        with open(TAREAS_FILE, 'w') as f:
            json.dump({
                'tareas': [t.to_dict() for _, _, t in self.tareas],
                'completadas': list(self.completadas)
            }, f, indent=2)

    def cargar_tareas(self):
        if os.path.exists(TAREAS_FILE):
            with open(TAREAS_FILE, 'r') as f:
                data = json.load(f)
                self.tareas = []
                for tdata in data.get('tareas', []):
                    t = Tarea.from_dict(tdata)
                    heapq.heappush(self.tareas, (t.prioridad, t.fecha_vencimiento, t))
                self.completadas = set(data.get('completadas', []))

    def agregar_tarea(self, nombre, prioridad, fecha_vencimiento, dependencias=None):
        if not nombre.strip():
            print("El nombre de la tarea no puede estar vacío.")
            return
        if not isinstance(prioridad, int):
            print("La prioridad debe ser un número entero.")
            return
        try:
            datetime.strptime(fecha_vencimiento, "%Y-%m-%d")
        except ValueError:
            print("La fecha debe tener formato YYYY-MM-DD.")
            return

        nueva_tarea = Tarea(nombre, prioridad, fecha_vencimiento, dependencias)
        heapq.heappush(self.tareas, (prioridad, fecha_vencimiento, nueva_tarea))
        self.guardar_tareas()
        print("Tarea añadida correctamente.")

    def mostrar_tareas(self):
        if not self.tareas:
            print("No hay tareas pendientes.")
            return
        print("\n Tareas pendientes:")
        for prioridad, fecha, tarea in sorted(self.tareas):
            status = "Ejecutable" if tarea.es_ejecutable(self.completadas) else "No ejecutable"
            print(f"• {tarea.nombre} | Prioridad: {prioridad} | Vence: {fecha} | Dependencias: {tarea.dependencias} | {status}")

    def completar_tarea(self, nombre):
        nuevas_tareas = []
        completada = False
        while self.tareas:
            prioridad, fecha, tarea = heapq.heappop(self.tareas)
            if tarea.nombre == nombre:
                completada = True
                self.completadas.add(nombre)
            else:
                nuevas_tareas.append((prioridad, fecha, tarea))
        for item in nuevas_tareas:
            heapq.heappush(self.tareas, item)
        self.guardar_tareas()
        if completada:
            print("Tarea completada y eliminada.")
        else:
            print("Tarea no encontrada.")

    def obtener_siguiente_tarea(self):
        ejecutables = [(p, f, t) for p, f, t in self.tareas if t.es_ejecutable(self.completadas)]
        if not ejecutables:
            print("No hay tareas ejecutables por ahora.")
            return
        siguiente = min(ejecutables)
        tarea = siguiente[2]
        print(f"Siguiente tarea ejecutable: {tarea.nombre} (Prioridad: {tarea.prioridad}, Vence: {tarea.fecha_vencimiento})")

def menu():
    gestor = GestorTareas()

    while True:
        print("\n--- MENÚ ---")
        print("1. Añadir tarea")
        print("2. Mostrar tareas pendientes")
        print("3. Completar tarea")
        print("4. Ver siguiente tarea ejecutable")
        print("5. Salir")

        opcion = input("Elige una opción: ")

        if opcion == '1':
            nombre = input("Nombre de la tarea: ")
            try:
                prioridad = int(input("Prioridad (número, menor es más urgente): "))
            except ValueError:
                print("Prioridad inválida. Debe ser un número.")
                continue
            fecha = input("Fecha de vencimiento (YYYY-MM-DD): ")
            deps = input("Dependencias (separadas por coma, opcional): ").split(",")
            dependencias = [d.strip() for d in deps if d.strip()]
            gestor.agregar_tarea(nombre, prioridad, fecha, dependencias)
        elif opcion == '2':
            gestor.mostrar_tareas()
        elif opcion == '3':
            nombre = input("Nombre de la tarea a completar: ")
            gestor.completar_tarea(nombre)
        elif opcion == '4':
            gestor.obtener_siguiente_tarea()
        elif opcion == '5':
            print("Saliendo... que tenga un buen día señor Fausto")
            break
        else:
            print("Opción no válida.")

if __name__ == "__main__":
    menu()
